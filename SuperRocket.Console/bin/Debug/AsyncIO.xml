<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsyncIO</name>
    </assembly>
    <members>
        <member name="T:AsyncIO.FileSystem.AsyncFile">
            <summary>
            Provides static methods for the asynchronous creation, copying, deletion, moving, writing and reading of a single file.
            </summary>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines asynchronously to a file, and then closes the file. 
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="path"/> specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines asynchronously to a file by using a specified encoding, and then closes the file. 
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="path"/> specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Appends lines asynchronously to a file, and then closes the file, and monitors cancellation requests. 
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="path"/> specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Appends lines asynchronously to a file by using a specified encoding, and then closes the file, and monitors cancellation requests. 
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="path"/> specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.AppendAllTextAsync(System.String,System.String)">
            <summary>
            Asynchronously appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <remarks>
            <para>Given a string and a file path, this method opens the specified file, appends the string to the end of the file using the specified encoding, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.</para>
            <para>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="path"/> specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.AppendAllTextAsync(System.String,System.String,System.Text.Encoding)">
            <summary>
            Asynchronously appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <remarks>
            <para>Given a string and a file path, this method opens the specified file, appends the string to the end of the file using the specified encoding, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.</para>
            <para>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="path"/> specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.CopyAsync(System.String,System.String)">
            <summary>
            Asynchronously copies an existing file to a new file, and monitors cancellation requests. Overwriting a file of the same name is not allowed.
            </summary>
            
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <remarks>
            <para>
            The <paramref name="sourceFileName"/> and <paramref name="destFileName"/> parameters can specify relative or absolute path information. 
            Relative path information is interpreted as relative to the current working directory. 
            This method does not support wildcard characters in the parameters.
            </para>
            <para>The attributes of the original file are retained in the copied file.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.
            <para>-or-</para>
            <para><paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="sourceFileName"/> or <paramref name="destFileName"/>is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            <para><paramref name="destFileName"/> exists.</para>
            <para>-or-</para>
            <para>An I/O error has occurred.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName"/> was not found.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName"/> is read-only.
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.CopyAsync(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>
            <para>
            The <paramref name="sourceFileName"/> and <paramref name="destFileName"/> parameters can specify relative or absolute path information. 
            Relative path information is interpreted as relative to the current working directory. 
            This method does not support wildcard characters in the parameters.
            </para>
            <para>The attributes of the original file are retained in the copied file.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.
            <para>-or-</para>
            <para><paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="sourceFileName"/> or <paramref name="destFileName"/>is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            <para><paramref name="destFileName"/> exists and <paramref name="overwrite"/> is <c>false</c>.</para>
            <para>-or-</para>
            <para>An I/O error has occurred.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName"/> was not found.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName"/> is read-only.
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.CopyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies an existing file to a new file, and monitors cancellation requests. Overwriting a file of the same name is not allowed.
            </summary>
            
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>
            <para>
            The <paramref name="sourceFileName"/> and <paramref name="destFileName"/> parameters can specify relative or absolute path information. 
            Relative path information is interpreted as relative to the current working directory. 
            This method does not support wildcard characters in the parameters.
            </para>
            <para>The attributes of the original file are retained in the copied file.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.
            <para>-or-</para>
            <para><paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="sourceFileName"/> or <paramref name="destFileName"/>is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            <para><paramref name="destFileName"/> exists.</para>
            <para>-or-</para>
            <para>An I/O error has occurred.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName"/> was not found.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName"/> is read-only.
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.CopyAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies an existing file to a new file, and monitors cancellation requests. Overwriting a file of the same name is allowed.
            </summary>
            
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>
            <para>
            The <paramref name="sourceFileName"/> and <paramref name="destFileName"/> parameters can specify relative or absolute path information. 
            Relative path information is interpreted as relative to the current working directory. 
            This method does not support wildcard characters in the parameters.
            </para>
            <para>The attributes of the original file are retained in the copied file.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.
            <para>-or-</para>
            <para><paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="sourceFileName"/> or <paramref name="destFileName"/>is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            <para><paramref name="destFileName"/> exists and <paramref name="overwrite"/> is <c>false</c>.</para>
            <para>-or-</para>
            <para>An I/O error has occurred.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName"/> was not found.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName"/> is read-only.
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.DeleteAsync(System.String)">
            <summary>
            Asynchronously deletes the specified file.
            </summary>
            
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <remarks>
            <para>
            Specify a file name with any relative or absolute path information for the <paramref name="path"/> parameter. 
            Wildcard characters cannot be included. Relative path information is interpreted as relative to the current working directory. 
            To obtain the current working directory, see <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </para>
            <para>If the file to be deleted does not exist, no exception is thrown.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            <para>The specified file is in use.</para>
            <para>-or-</para>
            <para>There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files.</para>
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="path"/> specifies a read-only file.
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            <para>-or-</para>
            <para>The file is an executable file that is in use.</para>
            <para>-or-</para>
            <para><paramref name="path"/> is a directory.</para>
            </exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.MoveAsync(System.String,System.String)">
            <summary>
            Asynchronously moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            
            <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param>
            <param name="destFileName">The new path and name for the file.</param>
            
            <remarks>
            <para>
            This method works across disk volumes, and it does not throw an exception if the source and destination are the same. 
            Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>. 
            You cannot use the Move method to overwrite an existing file.
            </para>
            <para>
            The <paramref name="sourceFileName"/> and <paramref name="destFileName"/> arguments can include relative or absolute path information. 
            Relative path information is interpreted as relative to the current working directory. 
            To obtain the current working directory, see <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </para>
            <para>If you try to move a file across disk volumes and that file is in use, the file is copied to the destination, but it is not deleted from the source.</para>
            </remarks>
            
            <exception cref="T:System.IO.IOException">
            <para>The destination file already exists.</para>
            <para>-or-</para>
            <para><paramref name="sourceFileName"/> was not found.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format.</exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.MoveAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously moves a specified file to a new location, providing the option to specify a new file name, and monitors cancellation requests.
            </summary>
            
            <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param>
            <param name="destFileName">The new path and name for the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <remarks>
            <para>
            This method works across disk volumes, and it does not throw an exception if the source and destination are the same. 
            Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>. 
            You cannot use the Move method to overwrite an existing file.
            </para>
            <para>
            The <paramref name="sourceFileName"/> and <paramref name="destFileName"/> arguments can include relative or absolute path information. 
            Relative path information is interpreted as relative to the current working directory. 
            To obtain the current working directory, see <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </para>
            <para>If you try to move a file across disk volumes and that file is in use, the file is copied to the destination, but it is not deleted from the source.</para>
            </remarks>
            
            <exception cref="T:System.IO.IOException">
            <para>The destination file already exists.</para>
            <para>-or-</para>
            <para><paramref name="sourceFileName"/> was not found.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format.</exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.ReadAllBytesAsync(System.String)">
            <summary>
            Opens a binary file, asynchronously reads the contents of the file into a byte array, and then closes the file.
            </summary>
            
            <param name="path">The file to open for reading.</param>
            
            <remarks>Given a file path, this method opens the file, reads the contents of the file into a byte array, and then closes the file.</remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="path"/> is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            
            <returns>A task with a byte array containing the contents of the file.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Opens a binary file, asynchronously reads the contents of the file into a byte array, and then closes the file, and monitors cancellation requests.
            </summary>
            
            <param name="path">The file to open for reading.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <remarks>Given a file path, this method opens the file, reads the contents of the file into a byte array, and then closes the file.</remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="path"/> is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            
            <returns>A task with a byte array containing the contents of the file.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.ReadAllLinesAsync(System.String)">
            <summary>
            Opens a file, asynchronously reads all lines of the file, and then closes the file.
            </summary>
            
            <param name="path">The file to open for reading.</param>
            
            <returns>A task with a string array containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="path"/> is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.ReadAllLinesAsync(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, asynchronously reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            
            <returns>A task with a string array containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="path"/> is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Opens a file, asynchronously reads all lines of the file, and then closes the file, and monitors cancellation requests.
            </summary>
            
            <param name="path">The file to open for reading.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <returns>A task with a string array containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="path"/> is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Opens a file, asynchronously reads all lines of the file with the specified encoding, and then closes the file, and monitors cancellation requests.
            </summary>
            
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <returns>A task with a string array containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="path"/> is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.ReadAllTextAsync(System.String)">
            <summary>
            Opens a file, asynchronously reads all lines of the file, and then closes the file.
            </summary>
            
            <param name="path">The file to open for reading.</param>
            
            <returns>A task with a string containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            <para>The file handle is guaranteed to be closed by this method, even if exceptions are raised.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="path"/> is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.ReadAllTextAsync(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, asynchronously reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            
            <returns>A task with a string containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            <para>The file handle is guaranteed to be closed by this method, even if exceptions are raised.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="path"/> is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.WriteAllBytesAsync(System.String,System.Byte[])">
            <summary>
            Creates a new file, asynchronously writes the specified byte array to the file, and then closes the file. 
            If the target file already exists, it is overwritten.
            </summary>
            
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>Given a byte array and a file path, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.</remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="bytes"/> is <c>null</c></exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Creates a new file, asynchronously writes the specified byte array to the file, and then closes the file, and monitors cancellation requests. 
            If the target file already exists, it is overwritten.
            </summary>
            
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>Given a byte array and a file path, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.</remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="bytes"/> is <c>null</c></exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, asynchronously writes a collection of strings to the file, and then closes the file.
            </summary>
            
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="contents"/> is <c>null</c></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, asynchronously writes a collection of strings to the file, and then closes the file.
            </summary>
            
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>, <paramref name="contents"/> or <paramref name="encoding"/> is <c>null</c></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a new file, asynchronously writes a collection of strings to the file, and then closes the file, and monitors cancellation requests.
            </summary>
            
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="contents"/> is <c>null</c></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Creates a new file by using the specified encoding, asynchronously writes a collection of strings to the file, and then closes the file, and monitors cancellation requests.
            </summary>
            
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>, <paramref name="contents"/> or <paramref name="encoding"/> is <c>null</c></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.WriteAllTextAsync(System.String,System.String)">
            <summary>
            Creates a new file, asynchronously writes the specified string to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="contents"/>is <c>null</c></exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.AsyncFile.WriteAllTextAsync(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, asynchronously writes the specified string to the file using the specified encoding, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>, <paramref name="contents"/> or <paramref name="encoding"/> is <c>null</c></exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para><paramref name="path"/> specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specified a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.PathValidator.EnsureCorrectFileSystemPath(System.String)">
            <summary>
            Ensures the correct file system path.
            </summary>
            <param name="path">The path to file or directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <remarks>Throws an exception if <paramref name="path"/> is not a correct file system path, otherwise no.</remarks>
        </member>
        <member name="T:AsyncIO.FileSystem.Extensions.FileInfoExtensions">
            <summary>
            Provides async extension method for <see cref="T:System.IO.FileInfo"/>.
            </summary>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.AppendAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines asynchronously to a file, and then closes the file. 
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="contents">The lines to append to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contents"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">File path specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>File path is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.AppendAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines asynchronously to a file by using a specified encoding, and then closes the file.
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contents"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">File path specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>File path is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.AppendAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Appends lines asynchronously to a file, and then closes the file, and monitors cancellation requests. 
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="contents">The lines to append to the file.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contents"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">File path specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>File path is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.AppendAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Appends lines asynchronously to a file by using a specified encoding, and then closes the file, and monitors cancellation requests.
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contents"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">File path specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>File path is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.AppendAllTextAsync(System.IO.FileInfo,System.String)">
            <summary>
            Asynchronously appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="contents">The string to append to the file.</param>
            <remarks>
            <para>Given a string and a file path, this method opens the specified file, appends the string to the end of the file using the specified encoding, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.</para>
            <para>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="contents"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.IO.PathTooLongException">File path exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">File path specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>File path is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.AppendAllTextAsync(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Asynchronously appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <remarks>
            <para>Given a string and a file path, this method opens the specified file, appends the string to the end of the file using the specified encoding, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.</para>
            <para>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="contents"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.IO.PathTooLongException">File path exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">File path specifies a file that is read-only.
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>File path is a directory.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.CopyToAsync(System.IO.FileInfo,System.String)">
            <summary>
            Asynchronously copies an existing file to a new file, and monitors cancellation requests. Overwriting a file of the same name is not allowed.
            </summary>
            
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <remarks>
            <para>
            The <paramref name="destFileName"/> parameter can specify relative or absolute path information. 
            Relative path information is interpreted as relative to the current working directory. 
            This method does not support wildcard characters in the parameters.
            </para>
            <para>The attributes of the original file are retained in the copied file.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            File path or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.
            <para>-or-</para>
            <para>File path or <paramref name="destFileName"/> specifies a directory.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">Either File path or <paramref name="destFileName"/>is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified inFile path or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            <para><paramref name="destFileName"/> exists.</para>
            <para>-or-</para>
            <para>An I/O error has occurred.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">Source file was not found.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName"/> is read-only.
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.CopyToAsync(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            Asynchronously copies an existing file to a new file, and monitors cancellation requests. Overwriting a file of the same name is not allowed.
            </summary>
            
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>
            <para>
            The <paramref name="destFileName"/> parameter can specify relative or absolute path information. 
            Relative path information is interpreted as relative to the current working directory. 
            This method does not support wildcard characters in the parameters.
            </para>
            <para>The attributes of the original file are retained in the copied file.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            File path or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.
            <para>-or-</para>
            <para>File path or <paramref name="destFileName"/> specifies a directory.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">Either File path or <paramref name="destFileName"/>is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified inFile path or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            <para><paramref name="destFileName"/> exists.</para>
            <para>-or-</para>
            <para>An I/O error has occurred.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">Source file was not found.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName"/> is read-only.
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.CopyToAsync(System.IO.FileInfo,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies an existing file to a new file, and monitors cancellation requests. Overwriting a file of the same name is not allowed.
            </summary>
            
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>
            <para>
            The <paramref name="destFileName"/> parameter can specify relative or absolute path information. 
            Relative path information is interpreted as relative to the current working directory. 
            This method does not support wildcard characters in the parameters.
            </para>
            <para>The attributes of the original file are retained in the copied file.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            File path or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.
            <para>-or-</para>
            <para>File path or <paramref name="destFileName"/> specifies a directory.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">Either File path or <paramref name="destFileName"/>is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified inFile path or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            <para><paramref name="destFileName"/> exists.</para>
            <para>-or-</para>
            <para>An I/O error has occurred.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">Source file was not found.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName"/> is read-only.
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.CopyToAsync(System.IO.FileInfo,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies an existing file to a new file, and monitors cancellation requests. Overwriting a file of the same name is not allowed.
            </summary>
            
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>
            <para>
            The <paramref name="destFileName"/> parameter can specify relative or absolute path information. 
            Relative path information is interpreted as relative to the current working directory. 
            This method does not support wildcard characters in the parameters.
            </para>
            <para>The attributes of the original file are retained in the copied file.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            File path or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.
            <para>-or-</para>
            <para>File path or <paramref name="destFileName"/> specifies a directory.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">Either File path or <paramref name="destFileName"/>is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified inFile path or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            <para><paramref name="destFileName"/> exists.</para>
            <para>-or-</para>
            <para>An I/O error has occurred.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">Source file was not found.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName"/> is read-only.
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.DeleteAsync(System.IO.FileInfo)">
            <summary>
            Asynchronously deletes the specified file.
            </summary>
            
            <remarks>
            <para>If the file to be deleted does not exist, no exception is thrown.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">File path is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in File path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            <para>The specified file is in use.</para>
            <para>-or-</para>
            <para>There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">File path specifies a read-only file.
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            <para>-or-</para>
            <para>The file is an executable file that is in use.</para>
            </exception>
            
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.ReadAllBytesAsync(System.IO.FileInfo)">
            <summary>
            Opens a binary file, asynchronously reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in File path is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in File path was not found.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            
            <returns>A task with a byte array containing the contents of the file.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.ReadAllBytesAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Opens a binary file, asynchronously reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in File path is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in File path was not found.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            
            <returns>A task with a byte array containing the contents of the file.</returns>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.ReadAllLinesAsync(System.IO.FileInfo)">
            <summary>
            Opens a file, asynchronously reads all lines of the file, and then closes the file.
            </summary>
            
            <returns>A task with a string array containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in File path is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in File path was not found.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.ReadAllLinesAsync(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Opens a file, asynchronously reads all lines of the file, and then closes the file.
            </summary>
            
            <param name="encoding">The encoding applied to the contents of the file.</param>
            
            <returns>A task with a string array containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in File path is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in File path was not found.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.ReadAllLinesAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Opens a file, asynchronously reads all lines of the file, and then closes the file.
            </summary>
            
            <param name="cancellationToken">The cancellation token.</param>
            
            <returns>A task with a string array containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in File path is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in File path was not found.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.ReadAllLinesAsync(System.IO.FileInfo,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Opens a file, asynchronously reads all lines of the file, and then closes the file.
            </summary>
            
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <returns>A task with a string array containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in File path is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in File path was not found.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.ReadAllTextAsync(System.IO.FileInfo)">
            <summary>
            Opens a file, asynchronously reads all lines of the file, and then closes the file.
            </summary>
            
            <returns>A task with a string containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            <para>The file handle is guaranteed to be closed by this method, even if exceptions are raised.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in File path is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in File path was not found.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.ReadAllTextAsync(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Opens a file, asynchronously reads all lines of the file, and then closes the file.
            </summary>
            
            <param name="encoding">The encoding applied to the contents of the file.</param>
            
            <returns>A task with a string containing all lines of the file.</returns>
            
            <remarks>
            <para>
            This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. 
            A line is defined as a sequence of characters followed by a carriage return ('\r'), a line feed ('\n'), or a carriage return immediately followed by a line feed. 
            The resulting string does not contain the terminating carriage return and/or line feed.
            </para>
            <para>The file handle is guaranteed to be closed by this method, even if exceptions are raised.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in File path is invalid, (dor example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in File path was not found.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.WriteAllBytesAsync(System.IO.FileInfo,System.Byte[])">
            <summary>
            Creates a new file, asynchronously writes the specified byte array to the file, and then closes the file. 
            If the target file already exists, it is overwritten.
            </summary>
            
            <param name="bytes">The bytes to write to the file.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>Given a byte array, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.</remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path or <paramref name="bytes"/> is <c>null</c></exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.WriteAllBytesAsync(System.IO.FileInfo,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Creates a new file, asynchronously writes the specified byte array to the file, and then closes the file. 
            If the target file already exists, it is overwritten.
            </summary>
            
            <param name="bytes">The bytes to write to the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>Given a byte array, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.</remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path or <paramref name="bytes"/> is <c>null</c></exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.WriteAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, asynchronously writes a collection of strings to the file, and then closes the file.
            </summary>
            
            <param name="contents">The lines to write to the file.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path or <paramref name="contents"/> is <c>null</c></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.WriteAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file, asynchronously writes a collection of strings to the file, and then closes the file.
            </summary>
            
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path or <paramref name="contents"/> is <c>null</c></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.WriteAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a new file, asynchronously writes a collection of strings to the file, and then closes the file.
            </summary>
            
            <param name="contents">The lines to write to the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path or <paramref name="contents"/> is <c>null</c></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.WriteAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Creates a new file, asynchronously writes a collection of strings to the file, and then closes the file.
            </summary>
            
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="cancellationToken">The cancellation token.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path or <paramref name="contents"/> is <c>null</c></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.WriteAllTextAsync(System.IO.FileInfo,System.String)">
            <summary>
            Creates a new file, asynchronously writes the specified string to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            
            <param name="contents">The string to write to the file.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path or <paramref name="contents"/>is <c>null</c></exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
        <member name="M:AsyncIO.FileSystem.Extensions.FileInfoExtensions.WriteAllTextAsync(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, asynchronously writes the specified string to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            
            <returns>Task that represents asynchronous operation.</returns>
            
            <remarks>If the target file already exists, it is overwritten.</remarks>
            
            <exception cref="T:System.ArgumentException">File path is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/></exception>
            <exception cref="T:System.ArgumentNullException">File path or <paramref name="contents"/>is <c>null</c></exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">File path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException">File path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>File path specified a file that is read-only.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para> 
            </exception>
        </member>
    </members>
</doc>
